trimmed_tidy <- final_tidy %>%
mutate(Sample_ID = str_sub(Sample_ID, 1, -5)) %>% #Shrinks sample name
mutate(Forward = str_detect(Sample_ID, "R1")) %>% #Logic output for direction
mutate(Direction = case_when(Forward == TRUE ~ "Forward",
Forward == FALSE ~ "Reverse")) %>%
select(-Forward) %>% #Removes logic col now that we have actual direction
mutate(Sample_ID = str_sub(Sample_ID,1, 5))
splom_names <- c("HabP1_R1", "HabP1_R2", "JalP1_R1", "JalP1_R2", "SerP1_R1", "SerP1_R2", "WaxP1_R1", "WaxP1_R2", "CheP1_R1", "CheP1_R2", "CheP2_R1", "CheP2_R2", "CheS1_R1", "CheS1_R2", "CheS2_R1", "CheS2_R2", "GhoP1_R1", "GhoP1_R2", "GhoS1_R1", "GhoS1_R2", "HabP2_R1", "HabP2_R2", "HabS1_R1", "HabS1_R2", "HabS2_R1", "HabS2_R2", "JalS1_R1", "JalS1_R2", "CayP2_R1", "CayP2_R2", "CayP3_R1", "CayP3_R2", "CayS1_R1", "CayS1_R2", "CayS3_R1", "CayS3_R2", "SerP2_R1", "SerP2_R2", "SerS1_R1", "SerS1_R2", "SerS2_R1", "SerS2_R2", "WaxP2_R1", "WaxP2_R2", "WaxS1_R1", "WaxS1_R2", "WaxS2_R1", "WaxS2_R2") #Object contains sample names in order
splom_data %>%
select(-c(1:3)) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Sample = splom_names) %>% #Adds correct sample names per rotation
mutate(Tissue = ifelse(str_detect(Sample, "P"), "Placenta", "Skin")) %>%
mutate(Direction = ifelse(str_detect(Sample, "R1"), "Forward", "Reverse")) %>%
print()
as_tibble(pepper_pca$x) %>% #Generates table
print()
print(splom_data)
summary(splom_data)
head(splom_data)
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = splom_data$genes_fpkm_with_protein_charact,
Locus = splom_data$locus) %>% print()
splom_data %>%
print()
?rename
splom_data %>%
select(-Protein_Function) %>%
rename(Gene_ID = genes_fpkm_with_protein_charact,
Locus = locus) %>%
print()
splom_data %>% colnames()
splom_data %>%
select(-c(1:3)) %>%
colnames()
splom_data %>%
select(-c(1:3)) %>%
colnames() -> pepper_columns
trimmed_tidy %>% select(Pepper_Name) %>% unique()
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else (str_detect(pepper_columns, "Cay")){
print("Cayenne")
}
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else (str_detect(pepper_columns, "Cay")){
print("Cayenne")
}
print("Cayenne")
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else  print("Cayenne")
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else print("Cayenne")
print(naming_function)
pepper_columns <- c("HabP1_R1", "HabP1_R2", "JalP1_R1", "JalP1_R2", "SerP1_R1", "SerP1_R2", "WaxP1_R1", "WaxP1_R2", "CheP1_R1", "CheP1_R2", "CheP2_R1", "CheP2_R2", "CheS1_R1", "CheS1_R2", "CheS2_R1", "CheS2_R2", "GhoP1_R1", "GhoP1_R2", "GhoS1_R1", "GhoS1_R2", "HabP2_R1", "HabP2_R2", "HabS1_R1", "HabS1_R2", "HabS2_R1", "HabS2_R2", "JalS1_R1", "JalS1_R2", "CayP2_R1", "CayP2_R2", "CayP3_R1", "CayP3_R2", "CayS1_R1", "CayS1_R2", "CayS3_R1", "CayS3_R2", "SerP2_R1", "SerP2_R2", "SerS1_R1", "SerS1_R2", "SerS2_R1", "SerS2_R2", "WaxP2_R1", "WaxP2_R2", "WaxS1_R1", "WaxS1_R2", "WaxS2_R1", "WaxS2_R2") #Object contains sample names in order
naming_function <- if(str_detect(pepper_columns, "Hab")){
print("Habanero")
} else if (str_detect(pepper_columns, "Jal")){
print("Jalapeno")
} else if (str_detect(pepper_columns, "Ser")){
print("Serrano")
} else if (str_detect(pepper_columns, "Wax")){
print("Hungarian Wax")
} else if (str_detect(pepper_columns, "Che")){
print("Cherry")
} else if (str_detect(pepper_columns, "Gho")){
print("Ghost")
} else print("Cayenne")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(lattice)
library(patchwork)
library(corrplot)
setwd("/Users/Caronelab/Desktop/Spicy_Pepper_Project/R_Workflow")
#setwd("/Users/nickpaterna/Repositories/Spicy_Pepper_Project/R_Workflow")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(lattice)
library(patchwork)
library(corrplot)
#setwd("/Users/Caronelab/Desktop/Spicy_Pepper_Project/R_Workflow")
setwd("/Users/nickpaterna/Repositories/Spicy_Pepper_Project/R_Workflow")
genes_fpkm <- read.csv ("genes_fpkm.csv") #Reading in FPKM Values
protein_data <- read.csv("Spicy_Pepper_cufflinks_information.csv") #Pepper info
splom_data <- read.csv("splom.csv") #Formatted for splom
splom_mod <- read.csv("splom_mod.csv") #Adjusted -Inf to 1
tidy_fpkm <- genes_fpkm %>%
pivot_longer(cols = 4:51,
names_to = "Sample_ID",
values_to = "FPKM") #Shrink dataframe width by creating 'Sample ID' col
final_tidy <- tidy_fpkm %>%
full_join(protein_data,
by = "Sample_ID") %>%
rename(c(Locus = locus,
Gene_ID = genes_fpkm_with_protein_charact))
#Add pepper information to tidied dataset, rename cols to make working w data easier
trimmed_tidy <- final_tidy %>%
mutate(Sample_ID = str_sub(Sample_ID, 1, -5)) %>% #Shrinks sample name
mutate(Forward = str_detect(Sample_ID, "R1")) %>% #Logic output for direction
mutate(Direction = case_when(Forward == TRUE ~ "Forward",
Forward == FALSE ~ "Reverse")) %>%
select(-Forward) %>% #Removes logic col now that we have actual direction
mutate(Sample_ID = str_sub(Sample_ID,1, 5))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(lattice)
library(patchwork)
library(corrplot)
#setwd("/Users/Caronelab/Desktop/Spicy_Pepper_Project/R_Workflow")
setwd("/Users/nickpaterna/Repositories/Spicy_Pepper_Project/R_Workflow")
genes_fpkm <- read.csv ("genes_fpkm.csv") #Reading in FPKM Values
protein_data <- read.csv("Spicy_Pepper_cufflinks_information.csv") #Pepper info
splom_data <- read.csv("splom.csv") #Formatted for splom
splom_mod <- read.csv("splom_mod.csv") #Adjusted -Inf to 1
genes_fpkm <- read_csv ("genes_fpkm.csv") #Reading in FPKM Values
protein_data <- read_csv("Spicy_Pepper_cufflinks_information.csv") #Pepper info
splom_data <- read_csv("splom.csv") #Formatted for splom
splom_mod <- read_csv("splom_mod.csv") #Adjusted -Inf to 1
genes_fpkm <- read_csv ("genes_fpkm.csv") #Reading in FPKM Values
protein_data <- read_csv("Spicy_Pepper_cufflinks_information.csv") #Pepper info
splom_data <- read_csv("splom.csv") #Formatted for splom
splom_mod <- read_csv("splom_mod.csv") #Adjusted -Inf to 1
tidy_fpkm <- genes_fpkm %>%
pivot_longer(cols = 4:51,
names_to = "Sample_ID",
values_to = "FPKM") #Shrink dataframe width by creating 'Sample ID' col
final_tidy <- tidy_fpkm %>%
full_join(protein_data,
by = "Sample_ID") %>%
rename(c(Locus = locus,
Gene_ID = genes_fpkm_with_protein_charact))
#Add pepper information to tidied dataset, rename cols to make working w data easier
trimmed_tidy <- final_tidy %>%
mutate(Sample_ID = str_sub(Sample_ID, 1, -5)) %>% #Shrinks sample name
mutate(Forward = str_detect(Sample_ID, "R1")) %>% #Logic output for direction
mutate(Direction = case_when(Forward == TRUE ~ "Forward",
Forward == FALSE ~ "Reverse")) %>%
select(-Forward) %>% #Removes logic col now that we have actual direction
mutate(Sample_ID = str_sub(Sample_ID,1, 5))
trimmed_tidy %>%
filter(Direction == "Forward") %>% #Removes duplicate libraries
ggplot(aes(x = Sample_ID, y = Mapped_Reads, fill = Pepper_Name)) +
geom_col() + theme_bw() +
scale_fill_brewer(palette = "Accent") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
labs(x = "Sample ID",
y = "Mapped Reads",
fill = "Pepper Name",
title = "Mapped Reads per Sample")
trimmed_tidy %>%
select(Sample_ID, FPKM, Pepper_Name) %>%
mutate(Log2_Trans = log2(FPKM))
trimmed_tidy %>%
select(Sample_ID, FPKM, Pepper_Name) %>%
mutate(Log2_Trans = log2(FPKM)) %>%drop_na()
splom_data
splom_mod
genes_fpkm %>%
pivot_longer(cols = 4:51,
names_to = "Sample_ID",
values_to = "FPKM")
genes_fpkm
install.packages("waldo")
library(waldo)
compare(gene_fpkm, splom_data)
compare(genes_fpkm, splom_data)
View(genes_fpkm)
tidy_fpkm <- genes_fpkm %>%
pivot_longer(cols = 4:51,
names_to = "Sample_ID",
values_to = "FPKM") #Shrink dataframe width by creating 'Sample ID' col
final_tidy <- tidy_fpkm %>%
full_join(protein_data,
by = "Sample_ID") %>%
rename(c(Locus = locus,
Gene_ID = genes_fpkm_with_protein_charact))
#Add pepper information to tidied dataset, rename cols to make working w data easier
trimmed_tidy <- final_tidy %>%
mutate(Sample_ID = str_sub(Sample_ID, 1, -5)) %>% #Shrinks sample name
mutate(Forward = str_detect(Sample_ID, "R1")) %>% #Logic output for direction
mutate(Direction = case_when(Forward == TRUE ~ "Forward",
Forward == FALSE ~ "Reverse")) %>%
select(-Forward) %>% #Removes logic col now that we have actual direction
mutate(Sample_ID = str_sub(Sample_ID,1, 5))
trimmed_tidy %>%
filter(Direction == "Forward") %>% #Removes duplicate libraries
ggplot(aes(x = Sample_ID, y = Mapped_Reads, fill = Pepper_Name)) +
geom_col() + theme_bw() +
scale_fill_brewer(palette = "Accent") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
labs(x = "Sample ID",
y = "Mapped Reads",
fill = "Pepper Name",
title = "Mapped Reads per Sample")
names(splom_data)
colnames(splom_data)
splom_data %>%
select(-c(1:3)) %>%
colnames()
splom_data %>%
select(-c(1:3)) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
splom_data %>%
select(-c(1:3))
trimmed_tidy
trimmed_tidy$FPKM
trimmed_tidy
splom_data
trimmed_tidy
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM))
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
group_by(Sample_ID) %>%
summarize(total = sum(FPKM_log2) )
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
group_by(Gene_ID, Sample_ID) %>%
summarize(total = sum(FPKM_log2) )
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2)
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID)
trimmed_tidy
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID,
Pepper_Name = pre_pca$Pepper_Name)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID,
Pepper_Name = pre_pca$Pepper_Name)
pre_pca %>%
select(-Gene_ID, -Pepper_Name) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
pre_pca %>%
select(-Gene_ID, -Pepper_Name) %>%
scale()
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca
pre_pca %>%
select(-Gene_ID, -Pepper_Name)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID,Pepper_Name, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
mutate(n=1:n()) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
pepper_pca
trimmed_tidy
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
)
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>%
ggplot(aes(x = PC1, y = PC2, color = Pepper_Name)) +
geom_point() + theme_bw()
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>%
ggplot(aes(x = PC1, y = PC2, color = Pepper_Name)) +
geom_point() + theme_bw()
pepper_pca$sdev
sum(pepper_pca$sdev)
(pepper_pca$sdev) / sum(pepper_pca$sdev)
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>%
ggplot(aes(x = PC1, y = PC2, color = Pepper_Name)) +
geom_point(size = 0.5, alpha=0.5) + theme_bw()
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>%
ggplot(aes(x = PC1, y = PC2, color = Pepper_Name)) +
geom_point(size = 0.5, alpha=0.5) + theme_bw() +
facet_wrap(~Pepper_Name)
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>% head()
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>%
left_join(
trimmed_tidy %>% select(Gene_ID, Pepper_Name)
) %>% select(PC1, Gene_ID, Pepper_Name) %>%head()
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Pepper_Name, Direction, FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
pepper_pca
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID)
as_tibble(pepper_pca$x) %>% #Generates table
mutate(Gene_ID = pre_pca$Gene_ID) %>% select(Gene_ID)
pepper_pca
pepper_pca$x
rownames(pepper_pca)
pepper_pca
row.names(pepper_pca)
pepper_pca
names(pepper_pca)
rownames(pepper_pca$x)
row.names(pepper_pca$x)
summary(pepper_pca)
pepper_pca$rotation
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, Pepper_Name, FPKM_log2) %>%
unite(combined, Sample_ID, Direction)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, Pepper_Name, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
group_by(Gene_ID) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2)
trimmed_tidy %>%
mutate(FPKM = ifelse(FPKM == 0, 1, FPKM),
FPKM_log2 = log2(FPKM))%>%
select(Gene_ID, Sample_ID, Direction, FPKM_log2) %>%
unite(combined, Sample_ID, Direction) %>%
pivot_wider(names_from = combined, values_from = FPKM_log2) -> pre_pca
pre_pca %>%
select(-Gene_ID) %>%
scale() %>% #Normalizes data for clustering
prcomp() -> pepper_pca
as_tibble(pepper_pca$x)
pre_pca
